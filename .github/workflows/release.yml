# Cut a release whenever a new tag is pushed to the repo.
# You should use an annotated tag, like `git tag -a v1.2.3`
# and put the release notes into the commit message for the tag.
name: Release

on:
  workflow_dispatch: # allow trigger through Web UI
  push:
    tags:
      - "v*.*.*"

jobs:
  build:
    # We don't attempt to cross-compile rust binaries from one OS to another.
    # So just spin up a runner on each OS to build its binaries.
    strategy:
      matrix:
        # Pin to runner releases since our Rust compile is fiddly with system libs
        os: [ubuntu-20.04, macos-13]
    runs-on: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v4

      - name: Build Rust Binaries
        env:
          # NB: this variable is read by tools/release/copy_release_artifacts.sh
          DEST: artifacts
        run: |
          rm -rf ${{ env.DEST }}
          mkdir -p ${{ env.DEST }}
          bazel --bazelrc=.github/workflows/ci.bazelrc \
            run --config=release //tools/release:copy_release_artifacts

      - uses: actions/upload-artifact@v4
        with:
          name: artifacts-${{ matrix.os }}
          path: artifacts/
          retention-days: 1

  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # Fetch the built artifacts from build jobs above and extract into
      # ${GITHUB_WORKSPACE}/artifacts-macos-latest/*
      # ${GITHUB_WORKSPACE}/artifacts-ubuntu-latest/*
      - uses: actions/download-artifact@v4

      - name: Prepare release
        run: .github/workflows/release_prep.sh > release_notes.txt

      - name: Release
        uses: softprops/action-gh-release@v2
        with:
          prerelease: false
          # Use GH feature to populate the changelog automatically
          generate_release_notes: true
          body_path: release_notes.txt
          files: |
            artifacts-*/*
            rules_py-*.tar.gz
          fail_on_unmatched_files: true
