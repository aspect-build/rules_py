"""
Helpes and constants.
"""

load("@bazel_skylib//lib:selects.bzl", "selects")

MAJORS = [2, 3]  # There is no 4
MINORS = range(0, 21)
PATCHES = range(0, 31)
INTERPRETERS = [
    "py",  # Generic
    "cp",  # CPython
    # "jy", # Jython
    # "ip", # IronPython
    # "pp", # PyPy, has its own ABI scheme :|
]

# FIXME: We're ignoring these for now which isn't ideal
FLAGS = {
    "d": "pydebug",
    "m": "pymalloc",
    "t": "freethreading",
    "u": "wide-unicode",  # Deprecated in 3.13
}

def generate_gte_ladder(stages):
    """Select macro.

    Accept a list of names of individual conditions representing specific versions.
    These names happen to be in ascending order and are generated by some other codepath.

    Given these condition label names generate a sequence ("ladder") of equality
    comparison operations + or with the "greater" comparison.

    So for [macos_10_0, macos_10_1, macos_11_0, macos_11_1, ...]
    We want to get

        selects.config_setting_group(
            name = "gte_macos_11_0",
            match_any = [
               ":macos_11_0",
               ":gte_macos_10_1",
            ],
        )
        selects.config_setting_group(
            name = "gte_macos_10_1",
            match_any = [
               ":macos_10_1",
               ":gte_macos_10_0",
            ],
        )

    As an added refinement the stages are a struct

        struct(
           name = <name of the ladder step>,
           condition = <condition for this ladder step>,
        )

    Args:
        stages (struct): pairs defining the name for a ladder rung and the
            condition defining when that rung is matched.

    Returns:
        None.

    """

    # We loop up to the second-to-last item to ensure we always have a 'next' stage.
    for i, current_stage in enumerate(stages):
        selects.config_setting_group(
            name = "{}".format(current_stage.name),
            match_any = [
                ":{}".format(current_stage.condition),
            ] + ([":{}".format(stages[i + 1].name)] if i + 1 < len(stages) else []),
        )
