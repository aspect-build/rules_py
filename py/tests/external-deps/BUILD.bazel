load("//py:defs.bzl", "py_binary", "py_library", "py_test")
load("@python_toolchain//:defs.bzl", "host_platform")
load("@aspect_bazel_lib//lib:write_source_files.bzl", "write_source_files")
load("//py/tests/external-deps/custom-macro:macro.bzl", "click_cli_binary")

py_library(
    name = "lib",
    srcs = ["lib.py"],
    deps = [
        "@pypi_colorama//:wheel",
    ],
)

py_binary(
    name = "pathing",
    srcs = ["pathing.py"],
    deps = [
        ":lib",
        "@pypi_django//:wheel",
    ],
)

genrule(
    name = "run_pathing",
    outs = ["pathing_out"],
    cmd = "|".join([
        "$(execpath pathing)",
        """sed "s#$$(pwd)#(pwd)#" """,
        "sed 's#^.*execroot/aspect_rules_py/external/python_toolchain_%s#(py_toolchain)#'" % host_platform,
        "sed 's#bazel-out/[_a-z0-9-]*-exec-[A-Z0-9]*/bin/#bazel-out/[exec]/bin/#'",
        "sed 's#(main, .*)#(main, REDACTED)#'",
    ]) + "> $@",
    tools = ["pathing"],
)

py_binary(
    name = "click",
    srcs = ["//py/tests/external-deps/custom-macro:__main__.py"],
    deps = [
        # Referencing the external py_library rule generated by rules_python
        "@pypi_click//:pkg",
    ],
)

genrule(
    name = "run_click",
    outs = ["click_out"],
    cmd = "$(execpath click) --count 314 > $@",
    tools = ["click"],
)

click_cli_binary(
    name = "click_binary",
)

genrule(
    name = "run_click_cli_binary",
    outs = ["click_cli_binary_out"],
    cmd = "$(execpath click_binary) --count 628 > $@",
    tools = ["click_binary"],
)

write_source_files(
    name = "test",
    files = {
        "expected_pathing": "pathing_out",
        "expected_click": "click_out",
        "expected_click_cli_binary": "click_cli_binary_out",
    },
)

py_test(
    name = "test_can_import_runfiles_helper",
    srcs = ["test_can_import_runfiles_helper.py"],
    deps = [
        "@bazel_tools//tools/python/runfiles",
    ],
)
