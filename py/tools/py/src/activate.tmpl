# Adapted from CPython Lib/venv/scripts/common/activate

set -eu -o pipefail

deactivate () {
    # reset old environment variables
    if [ -n "${_OLD_VIRTUAL_PATH:-}" ] ; then
        PATH="${_OLD_VIRTUAL_PATH:-}"
        export PATH
    fi

    if [ "${_OLD_VIRTUAL_PYTHONHOME:-}" = "_activate_undef" ]; then
        unset _OLD_VIRTUAL_PYTHONHOME
        unset PYTHONHOME
    elif [ -n "${_OLD_VIRTUAL_PYTHONHOME:-}" ] ; then
        PYTHONHOME="${_OLD_VIRTUAL_PYTHONHOME:-}"
        export PYTHONHOME
    fi

    # Call hash to forget past locations. Without forgetting past locations the
    # $PATH changes we made may not be respected. See "man bash" for more
    # details. hash is usually a builtin of your shell
    hash -r 2> /dev/null

    if [ -n "${_OLD_VIRTUAL_PS1:-}" ] ; then
        PS1="${_OLD_VIRTUAL_PS1:-}"
        export PS1
    fi

    unset _OLD_VIRTUAL_PS1
    unset _OLD_VIRTUAL_PATH
    unset _OLD_VIRTUAL_PYTHONHOME
    unset VIRTUAL_ENV
    unset VIRTUAL_ENV_PROMPT

    # Unset Bazel-injected vars
{{ENVVARS_UNSET}}

    # Unset vars we set with the runfiles interpreter. Note that this needs to
    # be conditional so we don't throw this state out under tests or run.
    if [ "${_OLD_RUNFILES_DIR:-}" = "_activate_undef" ]; then
        unset RUNFILES_DIR
        unset RUNFILES_MANIFEST_FILE
    fi

    if [ ! "${1:-}" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

{{DEBUG}}

# unset irrelevant variables
deactivate nondestructive

# For ZSH, emulate BASH_SOURCE.
# The runfiles library code has some deps on this so we just set it :/
: "${BASH_SOURCE:=$0}"

VIRTUAL_ENV="$(dirname "$(dirname "${BASH_SOURCE}")")"
export VIRTUAL_ENV

# HACK: (Ab)use the MacOS $PYTHONEXECUTABLE to record the `.runfiles`-relative
# interpreter path. This helps us avoid issues with the interpreter's path being
# `realpath`-ed in such a way that it escapes the `.runfiles` tree.
PYTHONEXECUTABLE="${VIRTUAL_ENV}/bin/python"
export PYTHONEXECUTABLE

# unset PYTHONHOME if set
# this will fail if PYTHONHOME is set to the empty string (which is bad anyway)
# could use `if (set -u; : $PYTHONHOME) ;` in bash.
_OLD_VIRTUAL_PYTHONHOME="${PYTHONHOME:-_activate_undef}"
unset PYTHONHOME

_OLD_VIRTUAL_PATH="$PATH"

# Aspect additions
# We set these before runfiles initialization so that we can use it as part of a fallback path
{{ENVVARS}}

# Initialize the runfiles interpreter if we're using one. Note that this happens
# AFTER unsetting the PYTHONHOME so that we can set PYTHONHOME if we're using a
# full bundled interpreter, and after we set the Bazel-specific envvars so we
# can provide some fallback handling around runfiles too.
{{RUNFILES_INTERPRETER}}

_abspath() {
    "${PYTHONEXECUTABLE}" -c 'import os, sys; print(os.path.abspath(sys.argv[1]))' "$@"
}

# Re-export abspath'd vars
# This allows us to avoid relative path issues without incurring sandbox escapes
VIRTUAL_ENV="$(_abspath "${VIRTUAL_ENV}")"
export VIRTUAL_ENV

PYTHONEXECUTABLE="$(_abspath "${PYTHONEXECUTABLE}")"
export PYTHONEXECUTABLE

if [ -n "${PYTHONHOME:-}" ]; then
  PYTHONHOME="$(_abspath "${PYTHONHOME}")"
  export PYTHONHOME
fi

# Now we can put the venv's absolute bin on the path
PATH="$VIRTUAL_ENV/bin:$PATH"
export PATH

# Call hash to forget past commands. Without forgetting
# past commands the $PATH changes we made may not be respected
hash -r 2> /dev/null

set +eu +o pipefail
