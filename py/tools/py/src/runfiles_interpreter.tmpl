# --- Runfiles-based interpreter setup --

# If the runfiles dir is unset AND we will fail to find a runfiles manifest
# based on inspecting $0, we need to try something different.
#
# What this means is that:
#
# - This script isn't being loaded from `bazel run`
#
# - The script is likely being loaded directly as "activate" rather than via a
#   launcher binary in which case the manifest would be obvious
#
# So we need to try and find the runfiles manifest by other means.

_activate_find_runfiles() {
    # $1 -- an executable path
    if [[ "${1}" == */execroot/*/bin/* ]]; then
       # Examples:
       # - ${BAZEL_HOME}/execroot/aspect_rules_py/bazel-out/darwin_arm64-fastbuild/bin/
       #
       # We can grab the execroot prefix, and then use the Bazel target info to
       # find the manifest file and runfiles tree relative to the execroot.

       # HACK: We can't lazy-match to the first /bin/, so we have to manually count four groups
       EXECROOT="$(echo "${1}" | sed 's/\(execroot\/[^\/]*\/[^\/]*\/[^\/]*\/[^\/]*\/\).*$/\1/' )"
       export RUNFILES_DIR="${EXECROOT}/${RUNFILES_PATH}"
    elif [[ "${1}" == *.runfiles/* ]]; then
       # Examples:
       # - bazel-bin/examples/py_venv/internal_venv.runfiles/aspect_rules_py/examples/py_venv/.internal_venv/bin/activate
       #
       # We are within the runfiles tree, so we just need to capture its root
       export RUNFILES_DIR="$(echo "${1}" | sed 's/\(.runfiles\).*$/\1/')"
    else
        return 1
    fi
}

if [ -z "${RUNFILES_DIR:-}" ] && \
    [ -z "${RUNFILES_MANIFEST_FILE:-}" ] && \
    [ ! -e "${BASH_SOURCE:-}.runfiles" ] && \
    [ ! -e "${BASH_SOURCE:-}.runfiles_manifest" ]; then

    # There are two cases here.
    # 1. In development, the realpath will be in a /execroot/ somewhere
    # 2. If copied to "production", the realpath will be in a .runfiles/ somewhere

    RUNFILES_PATH="$(echo "${BAZEL_TARGET}" | sed 's/^.*\/\/\(.*\):\(.*\)$/\1\/\2/' ).runfiles"

    set -uo pipefail;
    _activate_find_runfiles "${BASH_SOURCE}" || \
        _activate_find_runfiles "$(realpath "${BASH_SOURCE}")" || \
        { echo>&2 "ERROR: activate[.sh] cannot identify a fallback runfiles manifest!"; exit 1; };

    # FIXME: This should always be true, when is it not?
    if [ -e "${RUNFILES_DIR}/MANIFEST" ]; then
       RUNFILES_MANIFEST_FILE="${RUNFILES_DIR}/MANIFEST"
       export RUNFILES_MANIFEST_FILE
    fi

    # Set our magic flag to unset the runfiles vars
    _OLD_RUNFILES_DIR="_activate_undef"
fi

# As a workaround for export -f under zsh, we fence this whole thing off and pipe it to /dev/null
# HACK: Note that this is adjusted to use $BASH_SOURCE not $0; this works around other zsh vs bash issues
{

# --- begin runfiles.bash initialization v3 ---
# Copy-pasted from the Bazel Bash runfiles library v3.
# https://github.com/bazelbuild/bazel/blob/master/tools/bash/runfiles/runfiles.bash
set -uo pipefail; set +e; f=bazel_tools/tools/bash/runfiles/runfiles.bash
source "${RUNFILES_DIR:-/dev/null}/${f}" 2>/dev/null || \
    source "$(grep -sm1 "^${f} " "${RUNFILES_MANIFEST_FILE:-/dev/null}" | cut -f2- -d' ')" 2>/dev/null || \
    source "${BASH_SOURCE}.runfiles/${f}" 2>/dev/null || \
    source "$(grep -sm1 "^${f} " "${BASH_SOURCE}.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
    source "$(grep -sm1 "^${f} " "${BASH_SOURCE}.exe.runfiles_manifest" | cut -f2- -d' ')" 2>/dev/null || \
    { echo>&2 "ERROR: runfiles.bash initializer cannot find ${f}. An executable rule may have forgotten to expose it in the runfiles, or the binary may require RUNFILES_DIR to be set."; exit 1; }; f=; set -e
# --- end runfiles.bash initialization v3 ---

} >/dev/null

# Look up the runfiles-based interpreter and put its dir _first_ on the path.
INTERPRETER="$(realpath $(rlocation {{INTERPRETER_TARGET}}))"

# Figure out if we're dealing with just some program or a real install
# <SOMEDIR> <- possible $PYTHONHOME
#   bin/<SOMETHING> <- probably our interpreter
#   lib/...         <- site-packages, etc.
#
if [ "$(basename "$(dirname "$INTERPRETER")")" = "bin" ] && [ -e "$(dirname "$(dirname "$INTERPRETER")")/lib" ]; then
  # We also want to set PYTHONHOME
  # This should help avoid leakages and help us load libraries hermetically
  PYTHONHOME="$(dirname "$(dirname "$INTERPRETER")")"
  export PYTHONHOME

  # Note that since we are going to set PYTHONHOME ourselves in the case of a
  # hermetic interpreter, we need to explicitly unset that when deactivating.
  # If there was a previous PYTHONHOME, we want to reset to that.
  if [ -z "${_OLD_VIRTUAL_PYTHONHOME:-}" ]; then
     _OLD_VIRTUAL_PYTHONHOME="_activate_undef"
     export _OLD_VIRTUAL_PYTHONHOME
  fi

  # If we've got a real interpreter, we want to put its bindir on the path.
  # We'll put the venv's bindir in front of this one eventually.
  PATH="$PYTHONHOME/bin:$PATH"
  export PATH
fi

# FIXME: Need to handle a nominal interpreter (eg. some random script, not named
# as "python3.X" or an absolute path)
