"""Utilities for making toolchains"""
load("//tools:integrity.bzl", "RELEASED_BINARY_INTEGRITY")
load("//tools:version.bzl", "RELEASE_FORK", "VERSION")

# The expected config for each tool, whether it runs in an action or at runtime
RUST_BIN_CFG = {
    "unpack": "exec",
    "venv": "target",
}

TOOLCHAIN_PLATFORMS = {
    "darwin_amd64": struct(
        arch = "x86_64",
        vendor_os_abi = "apple-darwin",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:x86_64",
        ],
    ),
    "darwin_arm64": struct(
        arch = "aarch64",
        vendor_os_abi = "apple-darwin",
        compatible_with = [
            "@platforms//os:macos",
            "@platforms//cpu:aarch64",
        ],
    ),
    "linux_amd64": struct(
        arch = "x86_64",
        vendor_os_abi = "unknown-linux-gnu",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:x86_64",
        ],
    ),
    "linux_arm64": struct(
        arch = "aarch64",
        vendor_os_abi = "unknown-linux-gnu",
        compatible_with = [
            "@platforms//os:linux",
            "@platforms//cpu:aarch64",
        ],
    ),
}

def _toolchain_impl(ctx):
    binary = ctx.file.bin

    # Make a variable available in places like genrules.
    # See https://docs.bazel.build/versions/main/be/make-variables.html#custom_variables
    template_variables = platform_common.TemplateVariableInfo({
        ctx.attr.template_var: binary.path,
    })
    default_info = DefaultInfo(
        files = depset([binary]),
        runfiles = ctx.runfiles(files = [binary]),
    )

    # Export all the providers inside our ToolchainInfo
    # so the resolved_toolchain rule can grab and re-export them.
    toolchain_info = platform_common.ToolchainInfo(
        bin = binary,
        template_variables = template_variables,
        default_info = default_info,
    )

    return [toolchain_info, default_info, template_variables]

py_tool_toolchain = rule(
    implementation = _toolchain_impl,
    attrs = {
        "bin": attr.label(
            mandatory = True,
            allow_single_file = True,
        ),
        "template_var": attr.string(
            mandatory = True,
        ),
    },
)

def _make_toolchain_name(name, platform):
    return "{}_{}_toolchain".format(name, platform)

def source_toolchain(name, toolchain_type, bin):
    """Makes vtool toolchain and repositories

    Args:
        name: Override the prefix for the generated toolchain repositories.
        toolchain_type: Toolchain type reference.
        tools: Mapping of tool binary to platform.
    """

    toolchain_rule = "{}_toolchain_source".format(name)
    py_tool_toolchain(
        name = toolchain_rule,
        bin = bin,
        template_var = "{}_BIN".format(name.upper()),
    )
    native.toolchain(
        name = _make_toolchain_name(name, "source"),
        toolchain = toolchain_rule,
        toolchain_type = toolchain_type,
    )

def _tool_repo_impl(rctx):
    build_content = """\
# Generated by @aspect_rules_py//py/private/toolchain:tools.bzl
load("@aspect_rules_py//py/private/toolchain:tools.bzl", "py_tool_toolchain")

package(default_visibility = ["//visibility:public"])
"""
    for tool, cfg in RUST_BIN_CFG.items():
        filename = "-".join([
            tool,
            TOOLCHAIN_PLATFORMS[rctx.attr.platform].arch,
            TOOLCHAIN_PLATFORMS[rctx.attr.platform].vendor_os_abi,
        ])
        url = "https://github.com/{}/rules_py/releases/download/v{}/{}".format(
            RELEASE_FORK,
            VERSION,
            filename
        )
        rctx.download(
            url = url,
            sha256 = RELEASED_BINARY_INTEGRITY[filename],
            executable = True,
            output = tool,
        )
        build_content += """\
py_tool_toolchain(name = "concrete_{tool}_toolchain", bin = "{tool}", template_var = "{tool_upper}_BIN")

toolchain(
    name = "{tool}_toolchain",
    {cfg}_compatible_with = {compatible_with},
    toolchain = "concrete_{tool}_toolchain",
    toolchain_type = "@aspect_rules_py//py/private/toolchain/{tool}:toolchain_type",
)
""".format(
    cfg = cfg,
    compatible_with = TOOLCHAIN_PLATFORMS[rctx.attr.platform].compatible_with,
    tool = tool,
    tool_upper = tool.upper(),
)

    rctx.file("BUILD.bazel", build_content)

_tool_repo = repository_rule(
    doc = "Download pre-built binary tools and create toolchains for them",
    implementation = _tool_repo_impl,
    attrs = {
        "platform": attr.string(mandatory = True, values = TOOLCHAIN_PLATFORMS.keys()),
    }
)

def binary_tool_repos(name):
    """Create a downloaded toolchain for every tool under every supported platform.

    Args:
        name: prefix used in created repositories
    Returns:
        list of toolchain targets to register
    """
    result = []
    for platform in TOOLCHAIN_PLATFORMS.keys():
        tool_repo_name = ".".join([name, platform])
        result.append("@{}//:all".format(tool_repo_name))
        _tool_repo(name = tool_repo_name, platform = platform)
    return result