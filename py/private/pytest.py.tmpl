# Copyright 2022 Aspect Build Systems, Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
from pathlib import Path
from typing import List

import pytest
# None means coverage wasn't enabled
cov = None

# Since our py_test had InstrumentedFilesInfo, we know Bazel will hand us this environment variable.
# https://bazel.build/rules/lib/providers/InstrumentedFilesInfo
if "COVERAGE_MANIFEST" in os.environ:
    try:
        import coverage
        # The lines are files that matched the --instrumentation_filter flag
        with open(os.getenv("COVERAGE_MANIFEST"), "r") as mf:
            cov = coverage.Coverage(include = mf.read().splitlines())
        cov.start()
    except Exception as e:
        print("WARNING: python coverage setup failed. Do you need to include the 'coverage' library as a dependency of py_pytest_main?", e)
        pass

from pytest_shard import ShardPlugin

if __name__ == "__main__":
    # Change to the directory where we need to run the test or execute a no-op
    $$CHDIR$$

    os.environ["ENV"] = "testing"

    plugins = []
    args = [
        "--verbose",
        "--ignore=external/",
        # Avoid loading of the plugin "cacheprovider".
        "-p",
        "no:cacheprovider",
    ]

    junit_xml_out = os.environ.get("XML_OUTPUT_FILE")
    if junit_xml_out is not None:
        args.append(f"--junitxml={junit_xml_out}")

        suite_name = os.environ.get("BAZEL_TARGET")
        if suite_name:
            args.extend(["-o", f"junit_suite_name={suite_name}"])

    test_shard_index = os.environ.get("TEST_SHARD_INDEX")
    test_total_shards = os.environ.get("TEST_TOTAL_SHARDS")
    test_shard_status_file = os.environ.get("TEST_SHARD_STATUS_FILE")
    if (
        all([test_shard_index, test_total_shards, test_shard_status_file])
        and int(test_total_shards) > 1
    ):
        args.extend([
            f"--shard-id={test_shard_index}",
            f"--num-shards={test_total_shards}",
        ])
        Path(test_shard_status_file).touch()
        plugins.append(ShardPlugin())

    test_filter = os.environ.get("TESTBRIDGE_TEST_ONLY")
    if test_filter is not None:
        args.append(f"-k={test_filter}")

    user_args: List[str] = [$$FLAGS$$]
    if len(user_args) > 0:
        args.extend(user_args)

    cli_args = sys.argv[1:]
    if len(cli_args) > 0:
        args.extend(cli_args)

    exit_code = pytest.main(args, plugins=plugins)

    if exit_code != 0:
        print("Pytest exit code: " + str(exit_code), file=sys.stderr)
        print("Ran pytest.main with " + str(args), file=sys.stderr)
    elif cov:
        cov.stop()
        # https://bazel.build/configure/coverage
        cov.lcov_report(outfile = os.getenv("COVERAGE_OUTPUT_FILE"))
        cov.save()

    sys.exit(exit_code)
