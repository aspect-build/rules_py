"aspect-build/rules_py"

module(
    name = "aspect_rules_py",
    version = "0.0.0",
    compatibility_level = 1,
)

# Lower-bound versions of direct dependencies.
# When bumping, add a comment explaining what's required from the newer release.

# py_image_layer requires 2.x for the `tar` rule.
# py_image_layer needs compute_unused_inputs attribute
# py_image_layer needs repo_mapping fix.
bazel_dep(name = "aspect_bazel_lib", version = "2.16.0")
bazel_dep(name = "bazel_skylib", version = "1.4.2")

bazel_dep(name = "bazel_skylib_gazelle_plugin", version = "1.5.0", dev_dependency = True)
bazel_dep(name = "gazelle", version = "0.31.0", dev_dependency = True, repo_name = "bazel_gazelle")

bazel_dep(name = "platforms", version = "0.0.7")
bazel_dep(name = "rules_python", version = "1.0.0")

bazel_dep(name = "rules_python_gazelle_plugin", version = "1.0.0", dev_dependency = True)
bazel_dep(name = "toolchains_musl", version = "0.1.20", dev_dependency = True)
bazel_dep(name = "toolchains_llvm", version = "1.4.0", dev_dependency = True)

single_version_override(
    module_name = "rules_python",
    patch_strip = 0,
    patches = [
        "//third_party/com.github/bazel-contrib/rules_python:dev_pip.patch",
    ],
    version = "1.0.0",
)

# single_version_override(
#     module_name = "toolchains_llvm",
#     version = "0.10.3",
#     patches = [
#         "//third_party/com.github/bazel-contrib/toolchains_llvm:clang_ldd.patch",
#     ],
# )

bazel_lib = use_extension("@aspect_bazel_lib//lib:extensions.bzl", "toolchains")
bazel_lib.expand_template()
bazel_lib.tar()
use_repo(bazel_lib, "bsd_tar_toolchains")

# Custom python version for testing only
python = use_extension("@rules_python//python/extensions:python.bzl", "python", dev_dependency = True)
python.toolchain(
    is_default = True,
    python_version = "3.11",
)

pip = use_extension("@rules_python//python/extensions:pip.bzl", "pip", dev_dependency = True)
pip.parse(
    hub_name = "pypi",
    python_version = "3.11",
    requirements_lock = "//:requirements.txt",
)
pip.parse(
    hub_name = "django",
    python_version = "3.11",
    requirements_lock = "//py/tests/virtual/django:requirements.txt",
)
use_repo(pip, "django", "pypi", "pypi_311_pytest")

tools = use_extension("//py:extensions.bzl", "py_tools")
tools.rules_py_tools()
use_repo(tools, "rules_py_tools")
use_repo(tools, "rules_py_pex_2_3_1")

register_toolchains(
    "@rules_py_tools//:all",

    # Register the "from source" toolchains last, so there's no accidental dependency on Rust
    # For manual testing: comment these out to force use of pre-built binaries.
    "@aspect_rules_py//py/private/toolchain/venv/...",
    "@aspect_rules_py//py/private/toolchain/unpack/...",
    "@aspect_rules_py//py/private/toolchain/shim/...",
)

# To allow Rust binaries in /py/tools to be built from source
# NOTE: when publishing to BCR, we patch these to be dev_dependency, as we publish pre-built binaries
# along with our releases.

release_tools = use_extension("//tools/release:fetch.bzl", "release_tools", dev_dependency = True)
use_repo(
    release_tools,
    "musl_toolchains",
    "org_chromium_sysroot_linux_arm64",
    "org_chromium_sysroot_linux_x86_64",
    "sysroot_darwin_universal",
)

llvm = use_extension("@toolchains_llvm//toolchain/extensions:llvm.bzl", "llvm")

inject_repo(
    llvm,
    org_chromium_sysroot_linux_arm64 = "org_chromium_sysroot_linux_arm64",
    org_chromium_sysroot_linux_x86_64 = "org_chromium_sysroot_linux_x86_64",
    sysroot_darwin_universal = "sysroot_darwin_universal",
)

llvm.toolchain(
    name = "llvm_toolchain",
    llvm_version = "17.0.2",
)
use_repo(llvm, "llvm_toolchain", "llvm_toolchain_llvm")

register_toolchains("@llvm_toolchain//:all")

llvm.toolchain(
    name = "llvm_toolchain_linux_x86_64",
    llvm_version = "17.0.2",
)
llvm.toolchain_root(
    name = "llvm_toolchain_linux_x86_64",
    label = "@llvm_toolchain_llvm//:BUILD",
)
llvm.sysroot(
    name = "llvm_toolchain_linux_x86_64",
    label = "@org_chromium_sysroot_linux_x86_64//:sysroot",
    targets = ["linux-x86_64"],
)
use_repo(llvm, "llvm_toolchain_linux_x86_64")

register_toolchains("@llvm_toolchain_linux_x86_64//:all")

llvm.toolchain(
    name = "llvm_toolchain_linux_aarch64",
    llvm_version = "17.0.2",
)
llvm.toolchain_root(
    name = "llvm_toolchain_linux_aarch64",
    label = "@llvm_toolchain_llvm//:BUILD",
)
llvm.sysroot(
    name = "llvm_toolchain_linux_aarch64",
    label = "@org_chromium_sysroot_linux_arm64//:sysroot",
    targets = ["linux-aarch64"],
)
use_repo(llvm, "llvm_toolchain_linux_aarch64")

register_toolchains("@llvm_toolchain_linux_aarch64//:all")

llvm.toolchain(
    name = "llvm_toolchain_darwin_x86_64",
    llvm_version = "17.0.2",
)
llvm.toolchain_root(
    name = "llvm_toolchain_darwin_x86_64",
    label = "@llvm_toolchain_llvm//:BUILD",
)
llvm.sysroot(
    name = "llvm_toolchain_darwin_x86_64",
    label = "@sysroot_darwin_universal//:sysroot",
    targets = ["darwin-x86_64"],
)
use_repo(llvm, "llvm_toolchain_darwin_x86_64")

register_toolchains("@llvm_toolchain_darwin_x86_64//:all")

llvm.toolchain(
    name = "llvm_toolchain_darwin_aarch64",
    llvm_version = "17.0.2",
)
llvm.toolchain_root(
    name = "llvm_toolchain_darwin_aarch64",
    label = "@llvm_toolchain_llvm//:BUILD",
)
llvm.sysroot(
    name = "llvm_toolchain_darwin_aarch64",
    label = "@sysroot_darwin_universal//:sysroot",
    targets = ["darwin-aarch64"],
)
use_repo(llvm, "llvm_toolchain_darwin_aarch64")

register_toolchains("@llvm_toolchain_darwin_aarch64//:all")

bazel_dep(
    name = "rules_rust",
    version = "0.53.0",
    # In released versions: dev_dependency = True
)

rust = use_extension(
    "@rules_rust//rust:extensions.bzl",
    "rust",
    # In released versions: dev_dependency = True
)
rust.toolchain(
    edition = "2021",
    extra_target_triples = [
        "aarch64-apple-darwin",
        "aarch64-unknown-linux-gnu",
        "x86_64-apple-darwin",
        "x86_64-unknown-linux-gnu",
    ],
    versions = ["1.81.0"],
)
use_repo(rust, "rust_toolchains")

register_toolchains(
    "@rust_toolchains//:all",
    # In released versions: dev_dependency = True
)

crate = use_extension(
    "@rules_rust//crate_universe:extension.bzl",
    "crate",
    # In released versions: dev_dependency = True
)
crate.from_cargo(
    name = "crate_index",
    cargo_lockfile = "//:Cargo.lock",
    # Apparently not needed under bzlmod?
    # lockfile = "//:Cargo.Bazel.lock",
    manifests = [
        "//:Cargo.toml",
        "//py/tools/py:Cargo.toml",
        "//py/tools/unpack_bin:Cargo.toml",
        "//py/tools/venv_bin:Cargo.toml",
        "//py/tools/venv_shim:Cargo.toml",
    ],
)
use_repo(crate, "crate_index")

# For building test images with py_image_layer
bazel_dep(name = "container_structure_test", version = "1.19.3", dev_dependency = True)
git_override(
    module_name = "container_structure_test",
    commit = "56c7201716d770c0f820a9c19207ba2ea77c34f8",
    remote = "https://github.com/GoogleContainerTools/container-structure-test.git",
)

bazel_dep(name = "rules_oci", version = "2.0.1", dev_dependency = True)

oci = use_extension("@rules_oci//oci:extensions.bzl", "oci", dev_dependency = True)
oci.pull(
    name = "ubuntu",
    digest = "sha256:80dd3c3b9c6cecb9f1667e9290b3bc61b78c2678c02cbdae5f0fea92cc6734ab",
    image = "ubuntu",
    platforms = [
        "linux/arm64/v8",
        "linux/amd64",
    ],
    tag = "latest",
)
use_repo(oci, "ubuntu", "ubuntu_linux_amd64", "ubuntu_linux_arm64_v8")

http_file = use_repo_rule("@bazel_tools//tools/build_defs/repo:http.bzl", "http_file")

http_file(
    name = "django_4_2_4",
    downloaded_file_path = "Django-4.2.4-py3-none-any.whl",
    sha256 = "860ae6a138a238fc4f22c99b52f3ead982bb4b1aad8c0122bcd8c8a3a02e409d",
    urls = ["https://files.pythonhosted.org/packages/7f/9e/fc6bab255ae10bc57fa2f65646eace3d5405fbb7f5678b90140052d1db0f/Django-4.2.4-py3-none-any.whl"],
)
