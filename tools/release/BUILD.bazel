load("@aspect_bazel_lib//lib:transitions.bzl", "platform_transition_filegroup")
# buildifier: disable=bzl-visibility
# Since this is a load from private despite it being our private... sigh
load("//py/private/toolchain:tools.bzl", "TOOL_CFGS")

[
    platform(
        name = "{}_{}".format(os, cpu),
        constraint_values = [
            "@platforms//os:" + os,
            "@platforms//cpu:" + cpu,
            "//tools/linkers:musl" if os == "linux" else "//tools/linkers:unknown",
        ],
        visibility = ["//py/tools:__subpackages__"],
    )
    for os in [
        "linux",
        "macos",
    ]
    for cpu in [
        "aarch64",
        "x86_64",
    ]
]

# FIXME: This is kinda a mess. Should just be done with transitions? These can crossbuild.
LINUX_ARTIFACTS = [
    tool.target + "_linux"
    for tool in TOOL_CFGS
]

MACOS_ARTIFACTS = [
    tool.target + "_macos"
    for tool in TOOL_CFGS
]

platform_transition_filegroup(
    name = "linux_artifacts",
    srcs = LINUX_ARTIFACTS,
    target_platform = ":linux_aarch64"
)

platform_transition_filegroup(
    name = "macos_artifacts",
    srcs = MACOS_ARTIFACTS,
    target_platform = ":macos_aarch64"
)

sh_binary(
    name = "copy_release_artifacts",
    srcs = ["copy_release_artifacts.sh"],
    args = select({
        "@platforms//os:linux": ["$(rlocationpaths {})".format(s) for s in LINUX_ARTIFACTS],
        "@platforms//os:macos": ["$(rlocationpaths {})".format(s) for s in MACOS_ARTIFACTS],
    }),
    data = select({
        "@platforms//os:linux": LINUX_ARTIFACTS,
        "@platforms//os:macos": MACOS_ARTIFACTS,
    }),
    deps = ["@bazel_tools//tools/bash/runfiles"],
)

sh_binary(
    name = "copy_release_artifacts_e2e",
    srcs = ["copy_release_artifacts.sh"],
    args = [
        "$(rlocationpaths :linux_artifacts)",
        "$(rlocationpaths :macos_artifacts)",
    ],
    data = [
        ":linux_artifacts",
        ":macos_artifacts",
    ],
    deps = ["@bazel_tools//tools/bash/runfiles"],
)
