import %workspace%/bazel/defaults.bazelrc

common --enable_bzlmod

# Ignore slow manual and release targets
# Prevents materializing crossbuild
build --build_tag_filters=-manual,-release
test --test_tag_filters=-manual,-release

test --test_output=errors

# Define value used by tests
build --define=SOME_VAR=SOME_VALUE

common --features=-libtool
common --incompatible_enable_cc_toolchain_resolution

# TODO(bzlmod): Don't break proto
common --per_file_copt=external/.*protobuf.*@--PROTOBUF_WAS_NOT_SUPPOSED_TO_BE_BUILT
common --host_per_file_copt=external/.*protobuf.*@--PROTOBUF_WAS_NOT_SUPPOSED_TO_BE_BUILT

# Don't try and auto detect the cc toolchain, as we use our own gcc toolchains.
common --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=1
common --incompatible_enable_cc_toolchain_resolution

# Don't link against libunwind on macos as it causes linking failures (https://github.com/bazel-contrib/toolchains_llvm/pull/346)
common:macos --@toolchains_llvm//toolchain/config:libunwind=False

common:ci --toolchain_resolution_debug='@@bazel_tools//tools/cpp:toolchain_type'

common:release --build_tag_filters=release
common:release --stamp
common:release --compilation_mode=opt
common:release --@rules_rust//rust/settings:lto=fat

# Speed up local development by using the non-hermetic CPP toolchain.
common:nollvm --action_env=BAZEL_DO_NOT_DETECT_CPP_TOOLCHAIN=0
common:nollvm --noincompatible_enable_cc_toolchain_resolution

# Load any settings specific to the current user.
# .bazelrc.user should appear in .gitignore so that settings are not shared with team members
# This needs to be last statement in this
# config, as the user configuration should be able to overwrite flags from this file.
# See https://docs.bazel.build/versions/master/best-practices.html#bazelrc
# (Note that we use .bazelrc.user so the file appears next to .bazelrc in directory listing,
# rather than user.bazelrc as suggested in the Bazel docs)
try-import %workspace%/.bazelrc.user
