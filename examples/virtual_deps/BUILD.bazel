load("@aspect_rules_py//py:defs.bzl", "py_binary", "py_library", "py_pytest_main", "py_test", "resolutions")
load("@pypi//:requirements.bzl", "requirement")

py_library(
    name = "greet",
    imports = ["."],
    srcs = ["greet.py"],
    virtual_deps = ["cowsay"],
)

# A library that *looks* like cowsay... but isn't!
py_library(
    name = "cowsnake",
    imports = ["cowsnake"],
    srcs = ["cowsnake/cowsay.py"],
    virtual_deps = ["snakesay"],
)

py_binary(
    name = "app",
    srcs = ["main.py"],
    resolutions = resolutions.from_requirements([
        "cowsay",
    ], requirement),
    deps = [
        ":greet",
    ],
    python_version = "3.8.12",
)

# Here we swap out the cowsay module for our own implementation
py_binary(
    name = "app_snake",
    srcs = ["main.py"],
    deps = [
        ":greet",
    ],
    resolutions = resolutions.from_requirements([
        "snakesay",
    ], requirement).override({
        "cowsay": ":cowsnake",
    }),
    python_version = "3.8.12",
)

py_pytest_main(
    name = "__test__",
)

py_test(
    name = "pytest_test",
    srcs = [
        "greet_test.py",
        ":__test__",
    ],
    main = ":__test__.py",
    package_collisions = "error",
    resolutions = resolutions.from_requirements([
        "cowsay",
    ], requirement),
    deps = [
        requirement("pytest"),
        ":greet",
    ],
)
